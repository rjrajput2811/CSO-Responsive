@using CSO.Core.Security
@using Microsoft.AspNetCore.Http
@using CSO.Core.Repositories.SecurityActionRepo
@inject IHttpContextAccessor HttpContextAccessor
@inject ISecurityActionRepository _securityActionRepository

@model CSO.Core.Models.CSOLogViewModel

@{
    ViewData["Title"] = "CSOLogAnalysisDetails";

    var userRoleId = HttpContextAccessor.HttpContext.Session.GetInt32("UserRole");

    var canViewRootCause = await _securityActionRepository.CanDoAsync(SecurityActionsEnum.SEC_VIEW_ROOTCAUSE, (int)userRoleId);
    var canViewMonitor = await _securityActionRepository.CanDoAsync(SecurityActionsEnum.SEC_VIEW_MONITOR, (int)userRoleId);
    var canViewApprove = await _securityActionRepository.CanDoAsync(SecurityActionsEnum.SEC_VIEW_APPROVE, (int)userRoleId);
    var canViewClouser = await _securityActionRepository.CanDoAsync(SecurityActionsEnum.SEC_VIEW_CLOSURE, (int)userRoleId);

    var canAddRootCause = await _securityActionRepository.CanDoAsync(SecurityActionsEnum.SEC_ADD_ROOTCAUSE, (int)userRoleId);
    var canAddMonitor = await _securityActionRepository.CanDoAsync(SecurityActionsEnum.SEC_ADD_MONITOR, (int)userRoleId);
    var canAddApprove = await _securityActionRepository.CanDoAsync(SecurityActionsEnum.SEC_ADD_APPROVE, (int)userRoleId);
    var canAddClouser = await _securityActionRepository.CanDoAsync(SecurityActionsEnum.SEC_ADD_CLOSURE, (int)userRoleId);

    var canEditRootCause = await _securityActionRepository.CanDoAsync(SecurityActionsEnum.SEC_EDIT_ROOTCAUSE, (int)userRoleId);
    var canEditMonitor = await _securityActionRepository.CanDoAsync(SecurityActionsEnum.SEC_EDIT_MONITOR, (int)userRoleId);
    var canEditApprove = await _securityActionRepository.CanDoAsync(SecurityActionsEnum.SEC_EDIT_APPROVE, (int)userRoleId);
    var canEditClouser = await _securityActionRepository.CanDoAsync(SecurityActionsEnum.SEC_EDIT_CLOSURE, (int)userRoleId);
}

<link href="~/css/fontawesome/styles.min.css" rel="stylesheet" />
<script src="~/js/jquery.min.js"></script>
<script src="~/js/jquery.datatables.js"></script>
<link href="~/css/pnotify.css" rel="stylesheet" />
<script src="~/js/pnotify.js"></script>
<script src="~/js/pnotify.confirm.js"></script>
<script src="~/lib/bootstrap/dist/js/datatables.buttons.min.js"></script>
<script src="~/lib/bootstrap/dist/js/popupAlert.js"></script>
<script src="~/lib/bootstrap/dist/js/jszip.min.js"></script>
<script src="~/lib/bootstrap/dist/js/buttons.html5.min.js"></script>
<script src="~/js/common.js"></script>
<script src="~/js/xlsx.min.js"></script>

<style>
    body {
        background: #f4f6f9;
    }

    .card {
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.08);
    }

    .section-label {
        font-weight: 600;
    }

    textarea, select, input[type="file"] {
        resize: vertical;
    }

    .file-note {
        font-size: 0.85rem;
        color: #6c757d;
    }

    .badge-status {
        font-size: 0.85rem;
        float: right;
    }

    .section {
        background-color: #fff;
        border-radius: 8px;
        padding: 10px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

        .section h2 {
            margin-top: 0;
            font-size: 1.4rem;
            border-bottom: 2px solid #007bff;
            padding-bottom: 10px;
            color: #333;
        }

    .timeline-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 15px 10px;
    }

        .timeline-table th,
        .timeline-table td {
            padding: 10px;
            text-align: center;
        }

        .timeline-table td {
            font-size: 0.95em;
            border-radius: 0.5rem;
            box-shadow: 0 4px 12px rgba(17, 122, 139, 0.4);
            background-color: white;
            padding: 20px;
            color: #333;
            transition: all 0.3s ease-in-out;
        }

        .timeline-table .complete {
            color: green;
            font-weight: bold;
        }

        .timeline-table .pending {
            color: red;
            font-weight: bold;
        }

        .timeline-table .progressed {
            color: orange;
            font-weight: bold;
        }

        .timeline-table i {
            margin-right: 5px;
        }

    .section-title {
        background: #f8f9fa;
        padding: 10px;
        font-weight: 600;
        border-left: 4px solid #007bff;
        font-size: 18px;
    }

    .card {
        border-radius: 0.5rem;
        box-shadow: 0 4px 12px rgba(17, 122, 139, 0.4);
    }

    .table-responsive-timeline {
        width: 100%;
    }

    @@media (max-width: 768px) {
        .timeline-table thead {
            display: none;
        }

        .timeline-table,
        .timeline-table tbody,
        .timeline-table tr,
        .timeline-table td {
            display: block;
            width: 100%;
        }

            .timeline-table tr {
                margin-bottom: 15px;
                box-shadow: 0 4px 12px rgba(17, 122, 139, 0.1);
                border-radius: 8px;
                background: #fff;
            }

            .timeline-table td {
                position: relative;
                padding-left: 50%;
                text-align: left;
                box-shadow: none;
                border-top: 1px solid #eee;
                border-radius: 0;
            }

                .timeline-table td::before {
                    content: attr(data-label);
                    position: absolute;
                    top: 15px;
                    left: 15px;
                    width: 45%;
                    padding-right: 10px;
                    font-weight: 600;
                    color: #007bff;
                    white-space: nowrap;
                }

                .timeline-table td span {
                    display: block;
                    margin-top: 5px;
                }
    }

    .form-section {
        background: #fff;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        margin-top: 10px;
    }

        .form-section h4 {
            font-size: 18px;
            font-weight: 600;
            color: #007bff;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
        }

    .form-group {
        margin-bottom: 25px;
    }

    .form-label {
        font-weight: 600;
        color: #333;
        display: block;
        margin-bottom: 8px;
    }

    .form-control,
    textarea {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #ccc;
        border-radius: 6px;
        font-size: 1rem;
        background-color: #fff;
    }

    textarea {
        min-height: 80px;
        resize: vertical;
    }

    .file-upload-note {
        font-size: 0.9rem;
        color: #555;
        margin-top: 5px;
        font-style: italic;
    }

    .form-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }

    .btn-save {
        background-color: #00bcd4;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 6px;
        font-weight: 600;
        cursor: pointer;
    }

    .btn-submit {
        background-color: #03a9f4;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 6px;
        font-weight: 600;
        cursor: pointer;
    }

    .btn-cancel {
        background-color: #ff7043;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 6px;
        font-weight: 600;
        cursor: pointer;
    }

    @@media (max-width: 768px) {
        .form-buttons {
            flex-direction: column;
            align-items: stretch;
        }

            .form-buttons button {
                width: 100%;
            }
    }

</style>

<input id="hf_GetBrandListAndPlantListByDivisinAndUser" type="hidden" value='@Url.Action("GetBrandListAndPlantListByDivisinAndUser", "CSOLog")'>
<input id="hf_GetProductTypeListByBrandAndUser" type="hidden" value='@Url.Action("GetProductTypeListByBrandAndUser", "CSOLog")'>
<input id="hf_GetNearestPlantListByPlantAndUser" type="hidden" value='@Url.Action("GetNearestPlantListByPlantAndUser", "CSOLog")'>
<input id="hf_CSOLogGridPage" type="hidden" value='@Url.Action("Index", "CSOLog")'>
<input id="hf_SelectedBrandId" type="hidden" value='@Model.BrandId'>
<input id="hf_SelectedProductTypeId" type="hidden" value='@Model.ProductTypeId'>
<input id="hf_SelectedPlantId" type="hidden" value='@Model.PlantId'>
<input id="hf_SelectedNearestPlantId" type="hidden" value='@Model.NearestPlantId'>
<input id="hf_CSOSaveAddEdit" type="hidden" value='@Url.Action("AddEdit", "CSOLogAnalysisSolution")'>
<input id="hf_CSOAddEdit" type="hidden" value='@Url.Action("AddEdit", "CSOLogAnalysisSolution")'>


<div class="content">

    <div class="card" style="margin-top:10px;">
        <div class="card-body d-flex justify-content-between align-items-center" style="padding-top:8px;padding-bottom:8px;">
            <div style="font-size:18px; font-weight: 600;">
                CSO Analysis and Solution
            </div>

            <div class="col-md-2 mb-2 text-muted">
                CSO No. :
                @{
                    string CSONo = string.Empty;
                    if (Model.CSONo > 0 && Model.FinancialYear > 0)
                    {
                        CSONo = Model.CSONo + "/" + Model.FinancialYear;
                    }
                }
                <strong>
                    @Html.TextBox("CSONo", CSONo, new { @class = "form-control font-weight-bold", @disabled = "disabled" })
                </strong>
            </div>

            <div class="col-md-2 mb-2 text-muted">
                Logged By:
                <strong>
                    @Html.TextBoxFor(m => m.UserName, new { @class = "form-control font-weight-bold", @disabled = "disabled" })
                </strong>
            </div>

            <div class=" col-md-2 mb-2 text-muted">
                Log Date:
                <strong>
                    @Html.TextBoxFor(m => m.Logdate, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control font-weight-bold", @disabled = "disabled" })
                </strong>
            </div>

            <div>
                <button id="backButton" class="btn btn-outline-danger" onclick="history.back()">
                    <i class="fas fa-arrow-left"></i> Back
                </button>
            </div>
        </div>
    </div>
        <div class="card" style="margin-top:10px;">
            <div class="section">
                <div class="table-responsive-timeline">
                    <table class="timeline-table">
                        <thead>
                            <tr>
                                <th>CSO Logged</th>
                                <th>Root Cause Analysis</th>
                                <th>Monitoring and CA</th>
                                <th>Approved</th>
                                <th>Closure</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>

                                <td class="complete"><i class="fas fa-check-circle"></i>Complete<br><span style="color:#333; font-weight:normal;">15/02/2025<br>Admin<br>Day 2 of 45</span></td>
                                <td class="progressed"><i class="fas fa-hourglass-half"></i>In Progress<br><span style="color:#333; font-weight:normal;">Day 6 of 45</span></td>
                                <td class="pending"><i class="fas fa-times-circle"></i>Pending<br><span style="color:#555; font-weight:normal;">Not Started</span></td>
                                <td class="pending"><i class="fas fa-times-circle"></i>Pending<br><span style="color:#555; font-weight:normal;">Not Started</span></td>
                                <td class="pending"><i class="fas fa-times-circle"></i>Pending<br><span style="color:#555; font-weight:normal;">Not Started</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Tabs -->
        <ul class="nav nav-tabs nav-tabs-highlight mb-3">
            <li class="nav-item"><a href="#csoLog" class="nav-link active" data-bs-toggle="tab">CSO Log</a></li>
            @if (canViewRootCause)
            {
                <li class="nav-item"><a href="#root" class="nav-link" data-bs-toggle="tab">Root Cause</a></li>
            }
            @if (canViewMonitor)
            {
                <li class="nav-item"><a href="#monitor" class="nav-link" data-bs-toggle="tab">Monitoring</a></li>
            }
            @if (canViewApprove)
            {
                <li class="nav-item"><a href="#approve" class="nav-link" data-bs-toggle="tab">Approve / Reject</a></li>
            }
            @if (canViewClouser)
            {
                <li class="nav-item"><a href="#closure" class="nav-link" data-bs-toggle="tab">Closure</a></li>
            }
        </ul>

        <!-- Tab Content -->
        <div class="tab-content">


            <div class="tab-pane fade show active" id="csoLog">
                <div class="row g-4">
                    <div class="col-lg-12">
                        <div class="card p-4">
                            
                            <form id="CSOLogAnay-form" method="post" asp-action="InsertUpdateCSOLogAnay" asp-controller="CSOLogAnalysisSolution">
                                <div class="card">
                                    <div class=" section-title">

                                        <label class="mb-0"><i class="fas fa-address-card mr-2 text-primary"></i>General Details</label>
                                    </div>

                                    <div class="card-body">
                                        <div class="row g-3">
                                            @Html.HiddenFor(m => m.Id)
                                            @Html.HiddenFor(m => m.FinancialYear)
                                            <div class="col-md-2">
                                                <label class=" custom-label required">CSO No.</label>
                                                @{
                                                    string cSONo = string.Empty;
                                                    if (Model.CSONo > 0 && Model.FinancialYear > 0)
                                                    {
                                                        cSONo = Model.CSONo + "/" + Model.FinancialYear;
                                                    }
                                                }

                                                @Html.TextBox("CSONo", cSONo, new { @class = "form-control font-weight-bold", @disabled = "disabled" })
                                                @Html.ValidationMessageFor(m => m.CSONo, "", new { @class = "text-danger" })
                                            </div>

                                            <div class="col-md-4">
                                                <label class=" required select2 custom-label">Complaint Type*</label>
                                                @Html.DropDownListFor(m => m.ComplaintTypeId, (IEnumerable<SelectListItem>)ViewBag.ComplainTypeList, "Select ComplaintType", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.ComplaintTypeId, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-2">
                                                <label class=" required select2 custom-label">Division/BU</label>

                                                @Html.DropDownListFor(m => m.DivisionId, (IEnumerable<SelectListItem>)ViewBag.DivisionList, "Select Division", new { @class = "form-control " })
                                                @Html.ValidationMessageFor(m => m.DivisionId, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-2">
                                                <label class=" required select2 custom-label">Category / Function</label>

                                                @Html.DropDownListFor(m => m.CategoryId, (IEnumerable<SelectListItem>)ViewBag.CategoryList, "Select Category", new { @class = "form-control " })
                                                @Html.ValidationMessageFor(m => m.CategoryId, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-2">
                                                <label class=" required select2 custom-label">CSO Class*</label>

                                                @Html.DropDownListFor(m => m.CSOClassId, (IEnumerable<SelectListItem>)ViewBag.CSOClassList, "Select CSOClass", new { @class = "form-control " })
                                                @Html.ValidationMessageFor(m => m.CSOClassId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="card">
                                    <div class=" section-title">
                                        <label class="mb-0"><i class="fas fa-box-open mr-2 text-info"></i>Product Information</label>
                                    </div>
                                    <div class="card-body">
                                        <div class="row g-3">
                                            <div class="col-md-2">
                                                <label class=" required select2 custom-label">Brand</label>

                                                @Html.DropDownListFor(m => m.BrandId, Enumerable.Empty<SelectListItem>(), "Select Brand", new { @class = "form-control " })
                                                @Html.ValidationMessageFor(m => m.BrandId, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-2">
                                                <label class="required select2 custom-label">Product Type</label>

                                                @Html.DropDownListFor(m => m.ProductTypeId, Enumerable.Empty<SelectListItem>(), "Select Product Type", new { @class = "form-control " })
                                                @Html.ValidationMessageFor(m => m.ProductTypeId, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-3">
                                                <label class=" required select2 custom-label">SKU Details<em>*</em></label>

                                                @Html.ValidationMessageFor(m => m.SKUDetails, "", new { @class = "text-danger" })
                                                @Html.TextAreaFor(m => m.SKUDetails, 1, 40, new { @class = "form-control " })
                                            </div>
                                            <div class="col-md-2">
                                                <label class=" required select2 custom-label">Batch</label>

                                                @Html.TextBoxFor(m => m.Batch, new { @class = "form-control " })
                                                @Html.ValidationMessageFor(m => m.Batch, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-3">
                                                <label class=" required select2 custom-label">PKD Date</label>

                                                @Html.ValidationMessageFor(m => m.PKDDate, "", new { @class = "text-danger" })
                                                @Html.TextBoxFor(m => m.PKDDate, new { @class = "form-control " })

                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="card">
                                    <div class=" section-title">
                                        <label class="mb-0">  <i class="fas fa-industry mr-2 text-success"></i>Plant & Supply Info</label>
                                    </div>
                                    <div class="card-body">
                                        <div class="row g-3">
                                            <div class="col-md-2">
                                                <label class=" required select2 custom-label">Plant</label>

                                                @Html.DropDownListFor(m => m.PlantId, Enumerable.Empty<SelectListItem>(), "Select Plant", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.PlantId, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-2">
                                                <label class="required select2 custom-label">Nearest Plant</label>

                                                @Html.DropDownListFor(m => m.NearestPlantId, Enumerable.Empty<SelectListItem>(), "Select Nearest Plant", new { @class = "form-control ", @disabled = "disabled" })
                                                @Html.ValidationMessageFor(m => m.NearestPlantId, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-2">
                                                <label class="required select2 custom-label">Defective Quantity</label>

                                                @Html.TextBoxFor(m => m.Quantity, new { @class = "form-control " })
                                                @Html.ValidationMessageFor(m => m.Quantity, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-2">
                                                <label class="required select2 custom-label">Supplied Quantity</label>

                                                @Html.TextBoxFor(m => m.SuppliedQuantity, new { @class = "form-control " })
                                                @Html.ValidationMessageFor(m => m.SuppliedQuantity, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-2">
                                                <label class="required select2 custom-label">Cat Reference</label>

                                                @Html.TextBoxFor(m => m.CatReference, new { @class = "form-control " })
                                                @Html.ValidationMessageFor(m => m.CatReference, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="card">
                                    <div class=" section-title">
                                        <label class="mb-0"><i class="fas fa-exclamation-circle mr-2 text-danger"></i> Complaint Details</label>
                                    </div>
                                    <div class="card-body">
                                        <div class="row g-3">
                                            <div class="col-md-4">
                                                <label class="custom-label required select2">Description of Complaint</label>
                                                @Html.TextAreaFor(m => m.Description, 2, 40, new { @class = "form-control " })
                                                @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-4">
                                                <label class="custom-label required select2">Source of Complaint</label>
                                                @Html.TextBoxFor(m => m.SourceofComplaint, new { @class = "form-control " })
                                                @Html.ValidationMessageFor(m => m.SourceofComplaint, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-2">
                                                <label class="custom-label">
                                                    Samples Shipped
                                                    <div class="form-check form-switch">

                                                        @Html.CheckBoxFor(m => m.IsSampleShipped, new { @class = "slider round " })
                                                    </div>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="card">
                                    <div class=" section-title">
                                        <label class="mb-0"> <i class="fas fa-paperclip mr-2 text-primary"></i> Attachments</label>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label for="images" class="custom-label required">Upload Images</label>

                                            <input id="csoLogFile" type="file" class="form-control" name="img" multiple />
                                            @* @Html.ValidationMessageFor(m => m.CSOLogFileName, "", new { @class = "text-danger" }) *@
                                            @Html.Label("FileSize", "Maximum upload file size: 5 MB.", new { style = "font-style: italic; font-weight: normal;" })
                                            <div class="form-text">Max size 5MB per file</div>
                                        </div>

                                        <div class="form-group col-3" style="display:none" id="DivTrackingNo">
                                            <label class="form-label">TrackingNo</label>
                                            @Html.TextBoxFor(m => m.TrackingNo, new { @class = "form-control font-weight-bold" })
                                            @Html.ValidationMessageFor(m => m.TrackingNo, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="form-group col-3" id="DivEmptyTrackingNo">
                                        </div>
                                        <div class="form-group col-3">
                                        </div>
                                        <div class="form-group col-3">
                                            <ul class="attachment" id="CSOLogImagesUL">
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </form>
                                <div class="card">
                                    <div class="text-end m-3">
                                        <button type="button" class="btn btn-outline-info" onclick="InsertUpdateCSOLogAnay()">Save</button>
                                        <button type="button" class="btn btn-danger" onclick="onCancel()">Cancel</button>
                                    </div>
                                </div>
                        </div>
                    </div>
                </div>
            </div>

            @if (canViewRootCause)
            {
                <!-- Root Cause Tab -->
                <div class="tab-pane fade" id="root">
                    <div class="row g-4">
                        <div class="col-lg-8">
                            <div class="card p-4">
                                <div class="d-flex justify-content-between mb-3">
                                    <h5 class="section-label">Root Cause Analysis</h5>
                                    <span class="badge bg-success badge-status">Submitted</span>
                                </div>
                                <form id="CSOLogRootCause-form" method="post" asp-action="UpdateCSOLogForRootCause" asp-controller="CSOLogAnalysisSolution">
                                    <div class="mb-3">
                                        @Html.Label("Root Cause Analysis")
                                        @Html.TextAreaFor(m => m.RootCauseAnalysisDescription, 3, 40, (!canAddRootCause && !canEditRootCause) ? new { @class = "form-control", @disabled = "disabled" } : new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.RootCauseAnalysisDescription, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3">
                                        @Html.Label("Corrective Action")
                                        @Html.TextAreaFor(m => m.CorrectiveActionDescription, 3, 40, (!canAddRootCause && !canEditRootCause) ? new { @class = "form-control", @disabled = "disabled" } : new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.CorrectiveActionDescription, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3">
                                        @Html.Label("Preventive Action")
                                        @Html.TextAreaFor(m => m.PreventiveActionDescription, 3, 40, (!canAddRootCause && !canEditRootCause) ? new { @class = "form-control", @disabled = "disabled" } : new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.PreventiveActionDescription, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="text-end mt-4">
                                        @if (canAddRootCause || canEditRootCause)
                                        {
                                            <button type="button" id="saveButton" class="btn btn-primary" onclick="UpdateCSOLogRootCause('Save')">Save</button>
                                            <button type="button" class="btn btn-primary" onclick="UpdateCSOLogRootCause('Submit')">Submit</button>
                                        }
                                        <button type="button" class="btn btn-danger" onclick="onCancel()">Cancel</button>
                                    </div>
                                </form>
                            </div>
                        </div>

                        <div class="col-lg-4">
                            <div class="card p-4">
                                <h6 class="section-label mb-3">Supporting Attachments</h6>
                                <input id="csoRootCauseFile" type="file" class="form-control mb-2" @Html.Raw((!canAddRootCause && canEditRootCause) ? "disabled" : "")>
                                <div class="file-note">Max file size: 5 MB</div>
                                <hr>
                                <p class="mb-0">Attached: <a href="#">rca_image_apr24.jpg</a></p>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (canViewMonitor)
            {
                <!-- Monitoring Tab -->
                <div class="tab-pane fade" id="monitor">
                    <div class="card p-4">
                        <form id="CSOLogMonitor-form" method="post" asp-action="UpdateCSOLogForMonitor" asp-controller="CSOLogAnalysisSolution">
                            @Html.Label("Monitoring of Corrective Action")
                            @Html.TextAreaFor(m => m.MonitoringofCorrectiveActionDescription, 4, 40, (!canAddMonitor && !canEditMonitor) ? new { @class = "form-control", @disabled = "disabled" } : new { @class = "form-control" })
                            <div class="mt-3">
                                <label class="section-label">Attach File</label>
                                <input id="monitorFile" type="file" class="form-control" @Html.Raw((!canAddMonitor && canEditMonitor) ? "disabled" : null)>
                                <div class="file-note mt-1">Max file size: 5 MB</div>
                            </div>
                        </form>
                        <div class="text-end mt-4">
                            @if(canAddMonitor || canEditMonitor)
                            {
                                <button type="button" class="btn btn-outline-info" onclick="UpdateCSOLogMonitor('Save')">Save</button>
                                <button type="button" class="btn btn-success" onclick="UpdateCSOLogMonitor('Submit')">Submit</button>
                            }
                            <button type="button" class="btn btn-danger" onclick="onCancel()">Cancel</button>
                        </div>
                    </div>
                </div>
            }
            
            @if (canViewApprove)
            {
                <!-- Approve / Reject Tab -->
                <div class="tab-pane fade" id="approve">
                    <div class="card p-4">
                        <div class="d-flex justify-content-between mb-3">
                            <h5 class="section-label">Final Review - Approve / Reject</h5>
                            <span class="badge bg-warning text-dark badge-status">Pending Review</span>
                        </div>
                        <div class="row g-4">
                            <div class="col-md-8">
                                @Html.Label("Review Comments")
                                @Html.TextAreaFor(m => m.Review1, 4, 40, (!canAddApprove && !canEditApprove) ? new { @class = "form-control", @disabled = "disabled" } : new { @class = "form-control" })
                            </div>
                            <div class="col-md-4">
                                <label class="section-label">If Rejected, Revert To</label>
                                <select id="revertStatus" class="form-select" disabled>
                                    <option selected disabled>Select status...</option>
                                    <option value="root">Root Cause Analysis</option>
                                    <option value="monitor">Monitoring</option>
                                    <option value="log">Log CSO</option>
                                </select>
                            </div>
                        </div>
                        <div class="text-end mt-4">
                            @if(canAddApprove || canEditApprove)
                            {
                                <button id="btnReject" class="btn btn-outline-danger me-2">Reject</button>
                                <button type="button" class="btn btn-success me-2">Approve</button>
                            }
                            <button type="button" class="btn btn-secondary" onclick="onCancel()">Cancel</button>
                        </div>
                    </div>
                </div>
            }
            
            @if (canViewClouser)
            {
                <!-- Closure Tab -->
                <div class="tab-pane fade" id="closure">
                    <div class="card p-4">
                        <div class="d-flex justify-content-between mb-3">
                            <h5 class="section-label">Log Closure</h5>
                            <span class="badge bg-secondary badge-status">Final Step</span>
                        </div>
                        <div class="mb-3">
                            @Html.Label("Closure Comments")
                            @Html.TextAreaFor(m => m.Review2, 4, 40, (!canAddClouser && !canEditClouser) ? new { @class = "form-control", @disabled = "disabled" } : new { @class = "form-control" })
                        </div>
                        <div class="mb-3">
                            <label class="section-label">Closure Date</label>
                            <input type="date" class="form-control" @Html.Raw((!canAddClouser && canEditClouser) ? "disabled" : "")>
                        </div>
                        <div class="text-end">
                            @if(canAddClouser || canEditClouser)
                            {
                                <button type="button" class="btn btn-outline-info">Save</button>
                                <button type="button" class="btn btn-success">Close Log</button>
                            }
                            <button type="button" class="btn btn-secondary" onclick="onCancel()">Cancel</button>
                        </div>
                    </div>
                </div>
            }

        </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    @* <script src="~/js/CSOLog/CSOLog.js" asp-append-version="true"></script> *@
    <script src="~/js/csologanalysis/csoanalysis.js" asp-append-version="true"></script>
    <script asp-append-version="true">
        document.addEventListener("DOMContentLoaded", function () {
             const rejectBtn = document.getElementById("btnReject");
             const revertDropdown = document.getElementById("revertStatus");
             rejectBtn.addEventListener("click", function () {
               revertDropdown.removeAttribute("disabled");
               revertDropdown.focus();
             });
        });

        var csoLogId = @Model.Id;

        function onCancel() {
            var url = "@Url.Action("CSOLogAnalysisSolution", "CSOLogAnalysisSolution")";
            window.open(url, '_self');
        }
    </script>
}










